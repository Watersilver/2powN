{"version":3,"sources":["src/game.js","src/Keyboard.js","node_modules/hammerjs/hammer.js","src/ui/UI1.js","src/render.js","src/index.js"],"names":["Game","d","none","up","down","left","right","t","player","ai","gameOver","victory","s","init","move","moved","next","restartSymbol","Symbol","constructor","ui","step","start","started","Error","loop","_run","restart","_loop","update","steps","default","requestAnimationFrame","_initialize","size","winningCondition","turn","Number","isInteger","grid","Array","from","fill","mergeGrid","merged","moveGrid","direction","pressedKey","_addNew","initialized","fedVal","options","_canMove","_move","_getEmptyTile","choices","forEach","row","i","tile","j","push","length","Math","floor","random","newNum","prevTile","dir","reverse","swapIJ","won","wall","val","canMerge","v","moveDist","print","console","log","join","Keyboard","fnProblemKeys","Set","add","releaseProblemKeys","miscUnstableKeys","ignoreKeys","dontHoldKeys","undetectableKeys","_undetectableKeys","pressOnlyKeys","_pressOnlyKeys","allProblemKeys","_allProblemKeys","_prevDef","_pendingHeldKeys","_pendingReleasedKeys","_pressedKeys","_releasedKeys","_heldKeys","_listeners","keydown","e","preventDefault","has","code","keyup","blur","keys","clear","type","callback","Object","entries","document","addEventListener","preventDefaults","bool","getPressedKeys","getReleasedKeys","getHeldKeys","isPressed","key","isReleased","isHeld","delete","destroy","removeEventListener","window","exportName","undefined","VENDOR_PREFIXES","assign","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","isArray","each","obj","iterator","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","stack","replace","warn","apply","arguments","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","inherit","child","base","properties","baseP","childP","prototype","create","_super","boolOrFn","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","removeEventListeners","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","sort","results","values","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","self","inputTarget","domHandler","ev","enable","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","computeInputData","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","end","rotation","getRotation","maxPointers","computeIntervalInputData","last","velocity","velocityX","velocityY","lastInterval","getScale","srcEvent","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","touches","normalizeSingleTouches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","recordTouches","isSyntheticEvent","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","touchMap","cssSupports","CSS","supports","TouchAction","value","set","compute","actions","touchAction","cleanTouchActions","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","STATE_FAILED","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","createInputInstance","handlers","oldCssProps","toggleCssProps","item","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","triggerDomEvent","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","Tap","Pan","Swipe","Pinch","Rotate","Press","define","amd","module","exports","UI1","keyboard","root","classList","append","board","menu","pauseTitle","innerHTML","optionsForm","log2","MAX_SAFE_INTEGER","transDur","paused","mc","swipe","getSquare","children","newNumber","square","number","closeness","maxVal","backgroundColor","width","String","height","ratio","clientWidth","offsetLeft","top","offsetTop","clientHeight","transition","checkNew","game","checkMove","moving","mTiles","num","mi","mj","directions","prepend","startMerge","checkMerge","textContent","trunc","getElementById","pow","turns","msg","gridTemplateColumns","padding","margin","ui1","g"],"mappings":"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","file":"src.275adf89.js","sourceRoot":"..","sourcesContent":["const d = {\r\n  none: -1,\r\n  up: 0,\r\n  down: 1,\r\n  left: 2,\r\n  right: 3\r\n}\r\n\r\nconst t = {\r\n  none: -1,\r\n  player: 0,\r\n  ai: 1,\r\n  gameOver: 2,\r\n  victory: 3\r\n}\r\n\r\nconst s = {\r\n  none: -1,\r\n  init: 0,\r\n  move: 1,\r\n  moved: 2,\r\n  next: 3\r\n}\r\n\r\nconst restartSymbol = Symbol(\"Restart\");\r\n\r\nclass Game {\r\n  static turns = t;\r\n  static steps = s;\r\n  static directions = d;\r\n\r\n  constructor(ui) {\r\n    this.step = s.none;\r\n    this.ui = ui;\r\n  }\r\n\r\n  start() {\r\n    if (this.started) throw Error(\"Already started\");\r\n    this.started = true;\r\n\r\n    this.loop = this._run();\r\n\r\n    this.loop.restart = () => this.loop.next(restartSymbol);\r\n\r\n    this.ui.start(this);\r\n\r\n    this._loop();\r\n  }\r\n\r\n  _loop() {\r\n    this.ui.update(this);\r\n\r\n    switch (this.step) {\r\n      case Game.steps.init:\r\n        this.ui.init(this);\r\n        break;\r\n      case Game.steps.move:\r\n        this.ui.move(this);\r\n        break;\r\n      case Game.steps.moved:\r\n        this.ui.moved(this);\r\n        break;\r\n      case Game.steps.next:\r\n        this.ui.next(this);\r\n        break;\r\n      default:\r\n        this.ui.default(this);\r\n        break;\r\n    }\r\n    requestAnimationFrame(() => this._loop());\r\n  }\r\n\r\n  _initialize(size, winningCondition) {\r\n\r\n    this.turn = t.none;\r\n\r\n    // size must be integer >= 2\r\n    if (!(Number.isInteger(size) && size >= 2)) return false;\r\n\r\n    // winningCondition must be positive multiple of two\r\n    if (!(Number.isInteger(winningCondition) && !(winningCondition % 2))) return false;\r\n\r\n    this.winningCondition = winningCondition;\r\n\r\n    // The grid's current state\r\n    this.grid = Array.from(new Array(size), () => (new Array(size)).fill(0));\r\n\r\n    // Grid that shows on which squares a merge occured\r\n    this.mergeGrid = Array.from(new Array(size), () => new Array(size).fill(false));\r\n    this.mergeGrid.merged = 0;\r\n\r\n    // Grid that shows how many squares a tile moved\r\n    // (Use with direction for all the info)\r\n    this.moveGrid = Array.from(new Array(size), () => new Array(size).fill(0));\r\n    this.moveGrid.moved = 0;\r\n\r\n    // Stores direction user last inputed\r\n    this.direction = d.none;\r\n\r\n    this.pressedKey = \"\";\r\n\r\n    this.turn = t.ai;\r\n    this._addNew();\r\n    this.turn = t.ai;\r\n    this._addNew();\r\n\r\n    this.turn = t.player;\r\n\r\n    this.initialized = true;\r\n    return true;\r\n  }\r\n\r\n  // When it returns true, it loops\r\n  * _run() {\r\n    let fedVal;\r\n\r\n    while (true) {\r\n\r\n      this.step = s.init;\r\n\r\n      while (true) {\r\n        let options = yield true;\r\n        options = options || {size: 4, winningCondition: 2048};\r\n        const init = this._initialize(options.size, options.winningCondition);\r\n        if (init) break;\r\n      }\r\n\r\n      while (true) {\r\n        this.step = s.move;\r\n        fedVal = yield this._canMove();\r\n        if (fedVal === restartSymbol) break;\r\n\r\n        this.step = s.moved;\r\n        fedVal = yield this._move(fedVal);\r\n        if (fedVal === restartSymbol) break;\r\n\r\n        this.step = s.next;\r\n        fedVal = yield this._addNew();\r\n        if (fedVal === restartSymbol) break;\r\n      }\r\n    }\r\n  }\r\n\r\n  _getEmptyTile() {\r\n    const choices = [];\r\n\r\n    this.grid.forEach((row, i) =>\r\n      row.forEach((tile, j) => {\r\n        if (!tile) choices.push([i,j]);\r\n      }));\r\n\r\n    return choices.length ? choices[Math.floor(Math.random() * choices.length)] : [-1, -1];\r\n  }\r\n\r\n  _addNew() {\r\n    if (this.turn != t.ai) return false;\r\n\r\n    const [i, j] = this._getEmptyTile();\r\n\r\n    if (i < 0) {\r\n      this.turn = t.gameOver;\r\n      return false;\r\n    }\r\n\r\n    const newNum = Math.random() < 0.1 ? 4 : 2;\r\n\r\n    this.grid[i][j] = newNum;\r\n\r\n    this.turn = t.player;\r\n\r\n    return true;\r\n  }\r\n\r\n  _canMove() {\r\n    const size = this.grid.length;\r\n    let prevTile = -1;\r\n\r\n    for (const dir of [d.left, d.right, d.up, d.down]) {\r\n      const reverse = (dir === d.right || dir === d.up) ? true : false;\r\n      const swapIJ = (dir === d.down || dir === d.up) ? true : false;\r\n      for (let i = 0; i < size; i++) {\r\n        prevTile = -1;\r\n        for (let j = 0; j < size; j++) {\r\n          const tile = swapIJ ?\r\n          this.grid[reverse ? size-1-j : j][i] :\r\n          this.grid[i][reverse ? size-1-j : j];\r\n          // const tile = this.grid[i][j];\r\n          if (tile && (!prevTile || prevTile === tile)) return true;\r\n          prevTile = tile;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.turn = t.gameOver;\r\n    return false;\r\n  }\r\n\r\n  _move(dir) {\r\n    if (this.turn != t.player) return false;\r\n\r\n    const size = this.grid.length;\r\n    let won = false;\r\n\r\n    this.mergeGrid.forEach(row => row.fill(false));\r\n    this.mergeGrid.merged = 0;\r\n    this.moveGrid.forEach(row => row.fill(0));\r\n    this.moveGrid.moved = 0;\r\n    this.direction = dir;\r\n\r\n    switch (dir) {\r\n      case d.left: {\r\n\r\n        for (let i = 0; i < size; i++) {\r\n\r\n          let wall = {\r\n            val: -1,\r\n            i: i,\r\n            j: -1,\r\n            canMerge: false\r\n          };\r\n\r\n          for (let j = 0; j < size; j++) {\r\n            let v = this.grid[i][j];\r\n            if (!v) continue;\r\n\r\n            this.grid[i][j] = 0;\r\n\r\n            if (!(wall.canMerge && v === wall.val)) {\r\n              wall.canMerge = true;\r\n              wall.j++;\r\n            } else {\r\n              v *= 2;\r\n              if (v >= this.winningCondition) won = true;\r\n              wall.canMerge = false;\r\n              this.mergeGrid[wall.i][wall.j] = true;\r\n              this.mergeGrid.merged++;\r\n            }\r\n            this.grid[wall.i][wall.j] = v;\r\n            wall.val = v;\r\n\r\n            const moveDist = j - wall.j;\r\n            if (moveDist) {\r\n              this.moveGrid[i][j] = moveDist;\r\n              this.moveGrid.moved++;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case d.right: {\r\n\r\n        for (let i = 0; i < size; i++) {\r\n\r\n          let wall = {\r\n            val: -1,\r\n            i: i,\r\n            j: size,\r\n            canMerge: false\r\n          };\r\n\r\n          for (let j = size-1; j >= 0; j--) {\r\n            let v = this.grid[i][j];\r\n            if (!v) continue;\r\n\r\n            this.grid[i][j] = 0;\r\n\r\n            if (!(wall.canMerge && v === wall.val)) {\r\n              wall.canMerge = true;\r\n              wall.j--;\r\n            } else {\r\n              v *= 2;\r\n              if (v >= this.winningCondition) won = true;\r\n              wall.canMerge = false;\r\n              this.mergeGrid[wall.i][wall.j] = true;\r\n              this.mergeGrid.merged++;\r\n            }\r\n            this.grid[wall.i][wall.j] = v;\r\n            wall.val = v;\r\n\r\n            const moveDist = wall.j - j;\r\n            if (moveDist) {\r\n              this.moveGrid[i][j] = moveDist;\r\n              this.moveGrid.moved++;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case d.up: {\r\n\r\n        for (let j = 0; j < size; j++) {\r\n\r\n          let wall = {\r\n            val: -1,\r\n            i: -1,\r\n            j: j,\r\n            canMerge: false\r\n          };\r\n\r\n          for (let i = 0; i < size; i++) {\r\n            let v = this.grid[i][j];\r\n            if (!v) continue;\r\n\r\n            this.grid[i][j] = 0;\r\n\r\n            if (!(wall.canMerge && v === wall.val)) {\r\n              wall.canMerge = true;\r\n              wall.i++;\r\n            } else {\r\n              v *= 2;\r\n              if (v >= this.winningCondition) won = true;\r\n              wall.canMerge = false;\r\n              this.mergeGrid[wall.i][wall.j] = true;\r\n              this.mergeGrid.merged++;\r\n            }\r\n            this.grid[wall.i][wall.j] = v;\r\n            wall.val = v;\r\n\r\n            const moveDist = i - wall.i;\r\n            if (moveDist) {\r\n              this.moveGrid[i][j] = moveDist;\r\n              this.moveGrid.moved++;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case d.down: {\r\n\r\n        for (let j = 0; j < size; j++) {\r\n\r\n          let wall = {\r\n            val: -1,\r\n            i: size,\r\n            j: j,\r\n            canMerge: false\r\n          };\r\n\r\n          for (let i = size-1; i >= 0; i--) {\r\n            let v = this.grid[i][j];\r\n            if (!v) continue;\r\n\r\n            this.grid[i][j] = 0;\r\n\r\n            if (!(wall.canMerge && v === wall.val)) {\r\n              wall.canMerge = true;\r\n              wall.i--;\r\n            } else {\r\n              v *= 2;\r\n              if (v >= this.winningCondition) won = true;\r\n              wall.canMerge = false;\r\n              this.mergeGrid[wall.i][wall.j] = true;\r\n              this.mergeGrid.merged++;\r\n            }\r\n            this.grid[wall.i][wall.j] = v;\r\n            wall.val = v;\r\n\r\n            const moveDist = wall.i - i;\r\n            if (moveDist) {\r\n              this.moveGrid[i][j] = moveDist;\r\n              this.moveGrid.moved++;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.turn = won ? t.victory : (this.moveGrid.moved ? t.ai : t.player);\r\n\r\n    return this.turn === t.ai;\r\n  }\r\n\r\n  print() {\r\n    console.log(\"==Move===\");\r\n    this.moveGrid.forEach((row, i) => {\r\n      console.log(i+1 + \") [\"+row.join(\"][\")+\"]\");\r\n    })\r\n    console.log(\"=========\");\r\n\r\n    console.log(\"==Merge==\");\r\n    this.mergeGrid.forEach((row, i) => {\r\n      console.log(i+1 + \") [\"+row.join(\"][\")+\"]\");\r\n    })\r\n    console.log(\"=========\");\r\n\r\n    console.log(\"==Grid===\");\r\n    this.grid.forEach((row, i) => {\r\n      console.log(i+1 + \") [\"+row.join(\"][\")+\"]\");\r\n    })\r\n    console.log(\"=========\");\r\n  }\r\n}\r\n\r\nexport default Game","// If I release fn mid key-press, kb will think they are held\r\nconst fnProblemKeys = new Set([\r\n  \"VolumeDown\",\r\n  \"VolumeUp\",\r\n  \"AudioVolumeUp\",\r\n  \"AudioVolumeDown\"\r\n]);\r\nfor (let i = 1; i < 25; i++) {\r\n  fnProblemKeys.add(\"F\"+i);\r\n}\r\n\r\n// Key up fires immediatelly after keydown for the following\r\nconst releaseProblemKeys = new Set([\r\n  \"VolumeMute\",\r\n  \"AudioVolumeMute\",\r\n  \"MediaTrackPrevious\",\r\n  \"MediaPlayPause\",\r\n  \"MediaTrackNext\"\r\n]);\r\n\r\nconst miscUnstableKeys = new Set([\r\n  \"\",\r\n  // \"Pause\", // Look into pause // Probs safe\r\n  // \"ScrollLock\", // I think it's safe\r\n  \"PrintScreen\",\r\n  \"Unidentified\",\r\n  \"OSLeft\",\r\n  \"MetaLeft\",\r\n  \"OSRight\",\r\n  \"MetaRight\",\r\n  \"Power\",\r\n  \"BrowserSearch\",\r\n  \"BrowserFavorites\",\r\n  \"BrowserRefresh\",\r\n  \"BrowserStop\",\r\n  \"BrowserForward\",\r\n  \"BrowserBack\",\r\n  \"LaunchMail\",\r\n  \"LaunchMediaPlayer\",\r\n  \"MediaSelect\"\r\n]);\r\nfor (let i = 1; i < 3; i++) {\r\n  miscUnstableKeys.add(\"LaunchApp\"+i)\r\n}\r\n\r\nconst ignoreKeys = new Set([...releaseProblemKeys, ...miscUnstableKeys]);\r\nconst dontHoldKeys = new Set(fnProblemKeys);\r\n\r\nclass Keyboard {\r\n\r\n  static _undetectableKeys;\r\n  static _pressOnlyKeys;\r\n  static _allProblemKeys;\r\n\r\n  static get undetectableKeys() {\r\n    if (!Keyboard._undetectableKeys) Keyboard._undetectableKeys = new Set(ignoreKeys);\r\n    return Keyboard._undetectableKeys;\r\n  }\r\n  static get pressOnlyKeys() {\r\n    if (!Keyboard._pressOnlyKeys) Keyboard._pressOnlyKeys = new Set(dontHoldKeys);\r\n    return Keyboard._pressOnlyKeys;\r\n  }\r\n  static get allProblemKeys() {\r\n    if (!Keyboard._allProblemKeys) Keyboard._allProblemKeys = new Set([...ignoreKeys, ...dontHoldKeys]);\r\n    return Keyboard._allProblemKeys;\r\n  }\r\n\r\n  constructor() {\r\n    this._prevDef = true;\r\n    this._pendingHeldKeys = new Set();\r\n    this._pendingReleasedKeys = new Set();\r\n    // held keys could be a map (key: timestamp)\r\n    // but that would be unable to detect keypresses\r\n    // that lasted less than update interval.\r\n    // I need a separate heldKeys set because it's\r\n    // possible to press and release a key before\r\n    // it can be held by pressing and releasing\r\n    // before update runs\r\n    this._pressedKeys = new Set();\r\n    this._releasedKeys = new Set();\r\n    this._heldKeys = new Set();\r\n    this._listeners = {\r\n      keydown: e => {\r\n        if (this._prevDef) e.preventDefault();\r\n        if (ignoreKeys.has(e.code)) return;\r\n        this._pendingHeldKeys.add(e.code);\r\n      },\r\n\r\n      keyup: e => {\r\n        if (ignoreKeys.has(e.code) || dontHoldKeys.has(e.code)) return;\r\n        this._pendingReleasedKeys.add(e.code);\r\n      },\r\n\r\n      blur: () => {\r\n        this._pendingReleasedKeys = new Set(this._heldKeys.keys());\r\n        this._pendingHeldKeys.clear();\r\n      }\r\n    };\r\n\r\n    // Start listening\r\n    for (const [type, callback] of Object.entries(this._listeners)) {\r\n      document.addEventListener(type, callback);\r\n    }\r\n  }\r\n\r\n  preventDefaults(bool) {\r\n    this._prevDef = bool;\r\n  }\r\n\r\n  getPressedKeys() {\r\n    return new Set(this._pressedKeys);\r\n  }\r\n\r\n  getReleasedKeys() {\r\n    return new Set(this._releasedKeys);\r\n  }\r\n\r\n  getHeldKeys() {\r\n    return new Set(this._heldKeys);\r\n  }\r\n\r\n  isPressed(key) {\r\n    return this._pressedKeys.has(key);\r\n  }\r\n\r\n  isReleased(key) {\r\n    return this._releasedKeys.has(key);\r\n  }\r\n\r\n  isHeld(key) {\r\n    return this._heldKeys.has(key);\r\n  }\r\n\r\n  update() {\r\n    this._pressedKeys.clear();\r\n    this._releasedKeys.clear();\r\n\r\n    for (const key of this._pendingHeldKeys) {\r\n      if (!this._heldKeys.has(key)) {\r\n        this._pressedKeys.add(key);\r\n        if (!dontHoldKeys.has(key)) this._heldKeys.add(key);\r\n      }\r\n    }\r\n    this._pendingHeldKeys.clear();\r\n\r\n    for (const key of this._pendingReleasedKeys) {\r\n      if (this._heldKeys.has(key)) {\r\n        this._releasedKeys.add(key);\r\n        this._heldKeys.delete(key);\r\n      }\r\n    }\r\n    this._pendingReleasedKeys.clear();\r\n  }\r\n\r\n  destroy() {\r\n    for (const [type, callback] of Object.entries(this._listeners)) {\r\n      document.removeEventListener(type, callback);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","import Game from \"../game.js\"\r\nimport Keyboard from \"../Keyboard.js\"\r\nimport Hammer from \"hammerjs\";\r\n\r\nconst keyboard = new Keyboard();\r\n\r\nclass UI1 {\r\n  constructor(root) {\r\n    this.root = document.createElement(\"div\");\r\n    this.root.classList.add(\"ui1\");\r\n    root.append(this.root);\r\n\r\n    this.board = document.createElement(\"div\");\r\n    this.board.classList.add(\"board\");\r\n    this.root.append(this.board);\r\n\r\n    this.menu = document.createElement(\"div\");\r\n    this.menu.classList.add(\"menu\");\r\n    this.root.append(this.menu);\r\n\r\n    this.pauseTitle = document.createElement(\"h1\");\r\n    this.pauseTitle.innerHTML = \"2 ^ n, n&#8712;&#8469;\";\r\n\r\n    this.optionsForm = document.createElement(\"form\");\r\n    this.optionsForm.innerHTML = `\r\n      <label for\"gridSize\">Choose grid size: </label>\r\n      <input id=\"gridSize\" name=\"gridSize\" type=\"number\" required min=\"2\">\r\n      <label for\"powerOfTwo\">Choose winning condition: 2^</label>\r\n      <input id=\"powerOfTwo\" name=\"powerOfTwo\" type=\"number\" required min=\"2\" max=\"${Math.log2(Number.MAX_SAFE_INTEGER)}\">\r\n      <button id=\"optionsSubmitButton\" type=\"submit\">Start</button>\r\n    `;\r\n\r\n    this.menu.append(this.pauseTitle, this.optionsForm);\r\n\r\n    this.transDur = 0.2;\r\n\r\n    this.paused = true;\r\n\r\n    const mc = new Hammer(root);\r\n    mc.get(\"swipe\").set({ direction: Hammer.DIRECTION_ALL });\r\n    mc.get(\"pan\").set({ direction: Hammer.DIRECTION_ALL });\r\n\r\n    mc.on(\"swipeleft\", () => this.swipe = \"left\");\r\n    mc.on(\"swiperight\", () => this.swipe = \"right\");\r\n    mc.on(\"swipeup\", () => this.swipe = \"up\");\r\n    mc.on(\"swipedown\", () => this.swipe = \"down\");\r\n    mc.on(\"press\", () => this.paused = this.initialized ? !this.paused : this.paused);\r\n  }\r\n\r\n  getSquare(i, j) {\r\n    return this.board.children[i * this.size + j];\r\n  }\r\n\r\n  newNumber(val, i, j, merged) {\r\n    const square = this.getSquare(i, j);\r\n    const number = document.createElement(\"div\");\r\n\r\n    const closeness = Math.log2(val) / Math.log2(this.maxVal);\r\n\r\n    number.style.backgroundColor = `hsl(\r\n      ${360 * closeness}deg,\r\n      ${closeness * 100}%,\r\n      ${50 + closeness * 30}%\r\n    )`;\r\n    // ${90 + closeness * 10}%,\r\n    // ${40 + closeness * 20}%\r\n    \r\n    const width = String(val).length * 9;\r\n    const height = 18;\r\n    number.innerHTML = `\r\n      <svg style=${width > height ? '\"width:100%\"' : '\"height:100%\"'} viewBox=\"0 0 ${width} ${height}\">\r\n        <text x=\"50%\" y=\"60%\" dominant-baseline=\"middle\" text-anchor=\"middle\">${val}</text>\r\n      </svg>\r\n    `;\r\n    // x=\"0\" y=\"15\"\r\n\r\n    const ratio = 100 * square.clientWidth / this.board.clientWidth;\r\n    number.style.width = `${ratio}%`;\r\n    number.style.height = `${ratio}%`;\r\n\r\n    number.style.left = `${100 * square.offsetLeft / this.board.clientWidth}%`;\r\n    number.style.top = `${100 * square.offsetTop / this.board.clientHeight}%`;\r\n\r\n    number.style.transition = `left ${this.transDur}s ease, top ${this.transDur}s ease`;\r\n\r\n    number.classList.add(\"number\");\r\n\r\n    if (merged) number.classList.add(\"merge\");\r\n    else number.classList.add(\"appear\");\r\n\r\n    square.append(number);\r\n  }\r\n\r\n  checkNew(game) {\r\n    for (let i = 0; i < this.size; i++)\r\n      for (let j = 0; j < this.size; j++) {\r\n        const val = game.grid[i][j];\r\n        if (!val) continue;\r\n        // If square is empty add new\r\n        if (!this.getSquare(i, j).children.length) {\r\n          this.newNumber(val, i, j);\r\n        }\r\n      }\r\n  }\r\n\r\n  checkMove(game) {\r\n    const moved = game.moveGrid.moved;\r\n    if (!(moved && !this.moving)) return;\r\n\r\n    for (let i = 0; i < this.size; i++)\r\n      for (let j = 0; j < this.size; j++) {\r\n        const mTiles = game.moveGrid[i][j];\r\n        if (!mTiles) continue;\r\n\r\n        let number;\r\n\r\n        for (const num of this.getSquare(i, j).children) {\r\n          if (num.moved) continue;\r\n          number = num;\r\n        }\r\n\r\n        if (!number) continue;\r\n\r\n        number.moved = true;\r\n\r\n        let mi = i, mj = j;\r\n        switch (game.direction) {\r\n          case Game.directions.up:\r\n            mi -= mTiles;\r\n            break;\r\n          case Game.directions.down:\r\n            mi += mTiles;\r\n            break;\r\n          case Game.directions.left:\r\n            mj -= mTiles;\r\n            break;\r\n          case Game.directions.right:\r\n            mj += mTiles;\r\n            break;\r\n        }\r\n\r\n        this.getSquare(mi, mj).prepend(number);\r\n\r\n        // Set new position\r\n        const target = this.getSquare(mi, mj);\r\n\r\n        number.style.left = `${100 * target.offsetLeft / this.board.clientWidth}%`;\r\n        number.style.top = `${100 * target.offsetTop / this.board.clientHeight}%`;\r\n\r\n        number.classList.remove(\"merge\");\r\n        number.classList.remove(\"appear\");\r\n      }\r\n\r\n    for (let i = 0; i < this.size; i++)\r\n      for (let j = 0; j < this.size; j++) {\r\n        for (const number of this.getSquare(i, j).children) {\r\n          delete number.moved;\r\n        }\r\n      }\r\n\r\n    this.moving = true;\r\n    setTimeout(() => this.startMerge = true, this.transDur * 1000 + 30);\r\n  }\r\n\r\n  checkMerge(game) {\r\n    if (!this.startMerge) return;\r\n    this.startMerge = false;\r\n\r\n    for (let i = 0; i < this.size; i++)\r\n      for (let j = 0; j < this.size; j++) {\r\n        if (this.getSquare(i, j).children.length > 1) {\r\n          this.getSquare(i, j).textContent = \"\";\r\n          this.newNumber(game.grid[i][j], i, j, true);\r\n        }\r\n      }\r\n\r\n    setTimeout(() => this.moving = false, 1);\r\n  }\r\n\r\n  // Game Lifecycle methods\r\n  // Runs once at beginning\r\n  start(game) {\r\n    this.optionsForm.addEventListener(\"submit\", e => {\r\n      e.preventDefault();\r\n\r\n      const size = Math.trunc(Number(document.getElementById(\"gridSize\").value));\r\n      const pow = Math.trunc(Number(document.getElementById(\"powerOfTwo\").value));\r\n\r\n      this.options = {size, winningCondition: 2 ** pow};\r\n\r\n      const btn = document.getElementById(\"optionsSubmitButton\");\r\n      btn.innerHTML = \"Restart\";\r\n\r\n      this.paused = false;\r\n\r\n      game.loop.restart();\r\n    });\r\n  }\r\n\r\n  // Always runs\r\n  update(game) {\r\n    keyboard.update();\r\n\r\n    if (game.turn === Game.turns.gameOver) {\r\n      const msg = \"Game Over\";\r\n      if (game.initialized && this.pauseTitle.innerHTML !== msg)\r\n        this.pauseTitle.innerHTML = msg\r\n      this.menu.classList.add(\"game-over\");\r\n      this.menu.classList.add(\"visible\");\r\n    } else if (game.turn === Game.turns.victory) {\r\n      const msg = \"You Win\";\r\n      if (game.initialized && this.pauseTitle.innerHTML !== msg)\r\n        this.pauseTitle.innerHTML = msg\r\n      this.menu.classList.add(\"victory\");\r\n      this.menu.classList.add(\"visible\");\r\n    } else if (this.paused) {\r\n      const msg = \"PAUSED\";\r\n      if (game.initialized && this.pauseTitle.innerHTML !== msg)\r\n        this.pauseTitle.innerHTML = msg\r\n      this.menu.classList.add(\"visible\");\r\n    } else {\r\n      this.menu.classList.remove(\"victory\");\r\n      this.menu.classList.remove(\"game-over\");\r\n      this.menu.classList.remove(\"visible\");\r\n    }\r\n\r\n    if (!game.initialized) return;\r\n\r\n    if (keyboard.isPressed(\"KeyR\")) {\r\n      game.loop.restart();\r\n      this.paused = false;\r\n    }\r\n\r\n    if (keyboard.isPressed(\"Escape\")) {\r\n      this.paused = !this.paused;\r\n    }\r\n\r\n    this.checkMerge(game);\r\n\r\n    // Check restart\r\n    const restart = false;\r\n\r\n    if (restart) game.loop.restart();\r\n  }\r\n\r\n  // Runs if step is none\r\n  default(game) {\r\n    game.loop.next();\r\n  }\r\n\r\n  // Runs during init step\r\n  init(game) {\r\n    // game.loop.next(this.options || {size: 4, winningCondition: 2048});\r\n    if (this.options) {\r\n      game.loop.next(this.options);\r\n    }\r\n\r\n    if (!game.initialized) return;\r\n\r\n    this.initialized = game.initialized;\r\n    this.size = game.grid.length;\r\n    this.maxVal = game.winningCondition;\r\n\r\n    this.board.textContent = \"\";\r\n    this.board.style.gridTemplateColumns = `repeat(${this.size}, 1fr)`;\r\n    this.board.style.padding = `${1.7 * 4 / this.size}vmin`;\r\n\r\n    this.board.append(...Array.from(Array(this.size ** 2), () => {\r\n      const square = document.createElement(\"div\");\r\n      square.style.margin = `${1.7 * 4 / this.size}vmin`;\r\n      return square;\r\n    }));\r\n\r\n    this.checkNew(game);\r\n    game.print();\r\n  }\r\n\r\n  // Runs while waiting for input\r\n  move(game) {\r\n    const swipe = this.swipe;\r\n    this.swipe = null;\r\n\r\n    if (this.paused || this.moving || game.turn !== Game.turns.player) return;\r\n\r\n    // Run if I am ready for input\r\n    if (keyboard.isPressed(\"ArrowUp\") || swipe === \"up\") {\r\n      game.loop.next(Game.directions.up);\r\n      this.checkMove(game);\r\n    } else if (keyboard.isPressed(\"ArrowDown\") || swipe === \"down\") {\r\n      game.loop.next(Game.directions.down);\r\n      this.checkMove(game);\r\n    } else if (keyboard.isPressed(\"ArrowLeft\") || swipe === \"left\") {\r\n      game.loop.next(Game.directions.left);\r\n      this.checkMove(game);\r\n    } else if (keyboard.isPressed(\"ArrowRight\") || swipe === \"right\") {\r\n      game.loop.next(Game.directions.right);\r\n      this.checkMove(game);\r\n    }\r\n  }\r\n\r\n  // Runs after getting input\r\n  moved(game) {\r\n    game.loop.next();\r\n  }\r\n\r\n  // Runs before next iteration\r\n  next(game) {\r\n    game.loop.next();\r\n\r\n    this.checkNew(game);\r\n    game.print();\r\n  }\r\n}\r\n\r\nexport default UI1;","import Game from \"./game.js\"\r\nimport UI1 from \"./ui/UI1.js\"\r\n\r\nconst root = document.getElementById(\"root\");\r\n\r\nconst ui1 = new UI1(root);\r\n\r\nconst g = new Game(ui1);\r\n\r\ng.start();","import \"./render.js\";"]}